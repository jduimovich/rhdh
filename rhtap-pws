#!/bin/bash

function checkNSExists() { 
    kubectl get ns $1 &> /dev/null
    ERR=$?
    if [  "$ERR" != "0" ]
    then
        echo "$1 namespace missing!" 
        $2
        return 1
    else
        echo "$1 namespace found"
        return 0
    fi 
} 

echo "Check ACS Installation" 
echo   
checkNSExists "rhacs-operator" "echo 'ACS not installed on local machine.'"
ERR=$?
if [ "$ERR" = 0 ]
then
    URL=https://$(kubectl get routes central -n rhacs-operator -o jsonpath={.spec.host})
    PW=$(oc -n rhacs-operator get secret central-htpasswd -o go-template='{{index .data "password" | base64decode}}')
    
    echo
    echo "ACS Login = $URL"  
    echo "ACS PW = $PW"   
fi  

RHTAP_NS=rhtap   
 echo
echo "Check RHTAP Installation" 
echo 

 
# ensure exists or exist 
checkNSExists $RHTAP_NS exit

CONFIG=$(mktemp)
CONFIG2=$(mktemp)
kubectl get configmap -n rhtap developer-hub-rhtap-app-config  -o yaml >$CONFIG
yq .data.\"app-config.rhtap.yaml\" $CONFIG > $CONFIG2   
TARGET=$(yq ".catalog.locations[0].target" $CONFIG2)
echo "DEVELOPER_HUB__CATALOG__URL is $DEVELOPER_HUB__CATALOG__URL" 
echo "RHDH Configured to use: $TARGET"  
echo 
 

kubectl get ns rhacs-operator 2&> /dev/null
ERR=$?
if [ $ERR == 0 ]; then
    URL=https://$(kubectl get routes central -n rhacs-operator -o jsonpath={.spec.host})
    PW=$(oc -n rhacs-operator get secret central-htpasswd -o go-template='{{index .data "password" | base64decode}}')
    
    echo
    echo "ACS Login = $URL"  
    echo "ACS PW = $PW" 
else
    echo "ACS external to this cluster"
    echo "CENTRAL $ROX_CENTRAL_ENDPOINT" 
fi 

URL=https://$(kubectl get routes argocd-server -n rhtap -o jsonpath={.spec.host})
P64=$(kubectl get secret argocd-cluster  -n rhtap -ojsonpath='{.data.admin\.password}' )
ARGOPW=$(echo $P64 | base64 --decode -i -)
echo
echo "rhtap argocd console = $URL" 
echo "rhtap argo pw = $ARGOPW" 
echo 

function printRoutes2() { 
    NS=$1
    echo "Routes in $NS"
    for r in $(kubectl get routes -n $NS -o name)
    do
        URL=https://$(kubectl get $r -n $NS -o jsonpath={.spec.host}  )
        echo "$URL"  
    done 
    echo
}
function printRoutes() { 
    NS=$1
    URL=$(mktemp)
    echo "Routes in $NS" >$URL
    for r in $(kubectl get routes -n $NS -o name)
    do
        echo "https://$(kubectl get $r -n $NS -o jsonpath={.spec.host}  )" >>$URL &
    done 
    wait
    cat $URL
    echo
}

printRoutes rhtap 
printRoutes rhtap-tas 
printRoutes rhtap-tpa 

WEBHOOK=https://$(oc get routes -n openshift-pipelines pipelines-as-code-controller -ojsonpath={.spec.host})
echo
echo "Pac Webhook = $WEBHOOK"  


Homepage=https://$(oc get routes -n rhtap redhat-developer-hub  -ojsonpath={.spec.host})
echo
echo "Homepage = $Homepage"  


echo "Callback GITHUB = $Homepage/api/auth/github/handler/frame"  
echo "Callback GITLAB = $Homepage/api/auth/gitlab/handler/frame"  
 