SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )" 

# Scripts to configure app-config.txt in the developer-hub-app-config configmap.
# source it to allow it to exit this script
source $SCRIPTDIR/verify-dependencies 

CM_NAME=developer-hub-app-config
CM_NS=rhdh  
CM=workdir/cm.yaml
AC=workdir/app-config.yaml 

kubectl get configmap -n $CM_NS $CM_NAME -o yaml >$CM
yq .data.\"app-config.yaml\" $CM > $AC

ENABLED="argocd github gitlab kubernetes"
for option in $ENABLED ; do
  yq -i ".enabled.$option = true" $AC 
done  

yq -i ".app.baseUrl = \"https://$BACKSTAGE\"" $AC 

BACKSTAGE=$(kubectl get routes -n rhdh developer-hub -o jsonpath={.spec.host})

# URL 
yq -i ".app.baseUrl = \"https://$BACKSTAGE\"" $AC 

# Github and Gitlab 

yq -i ".integrations.github  = [{\"host\": \"github.com\", \"token\": \"$MY_GITHUB_TOKEN\"}]"  $AC  
yq -i ".integrations.gitlab  = [{\"host\": \"gitlab.com\", \"token\": \"$MY_GITLAB_TOKEN\"}]"  $AC    

# Providers 
yq -i '.auth.environment  = "development"'  $AC    
yq -i ".auth.providers.github.development.clientId  = \"$MY_GITHUB_OATH_CLIENT\""  $AC   
yq -i ".auth.providers.github.development.clientSecret  = \"$MY_GITHUB_OATH_SECRET\""  $AC   

yq -i ".auth.providers.gitlab.development.clientId  = \"$MY_GITLAB_OATH_CLIENT\""  $AC   
yq -i ".auth.providers.gitlab.development.clientSecret  = \"$MY_GITLAB_OATH_SECRET\""  $AC    

# ArgoCD 
P64=$(kubectl get secret openshift-gitops-cluster -n openshift-gitops -ojsonpath='{.data.admin\.password}' )
ARGOPW=$(echo $P64 | base64 --decode -i -)
ARGOURL=$(kubectl get routes -n openshift-gitops openshift-gitops-server -o jsonpath={.spec.host})
yq -i ".argocd.appLocatorMethods  = [{\"instances\":  \
  [{ \"name\": \"main\", \"password\": \"$ARGOPW\", \"url\": \"https://$ARGOURL\", \"username\": \"admin\"  }] ,\
   \"type\": \"config\"}]"  $AC    
  
# Update the CM and install it
CONTENTS=$(cat $AC)  
yq -i ".data.\"app-config.yaml\"=\"$CONTENTS\"" $CM   
yq .data.\"app-config.yaml\" $CM 
kubectl apply -n $CM_NS -f $CM
# delete the pod labeled backstage 
kubectl delete pods -n $CM_NS -l "app.kubernetes.io/component=backstage"



 